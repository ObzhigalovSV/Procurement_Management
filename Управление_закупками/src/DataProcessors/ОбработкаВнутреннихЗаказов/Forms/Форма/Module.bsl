#Область ОбработчикиСобытийФормы        

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ВнутреннийЗаказ = Параметры.ВнутреннийЗаказ;  
	УстановитьЗаголовокИДоступностьФормы();
	ЗаполнитьРеквизитыФормыДаннымиИзВнутреннегоЗаказа(ВнутреннийЗаказ);
	
	ТолькоСвояНоменклатура = Истина;	
	УстановитьОтборПоОтветственному();
	Модифицированность = Ложь;
	
КонецПроцедуры  

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(ОписаниеОповещения, Отказ, ЗавершениеРаботы);
	
	Если Модифицированность Или ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ОбработатьВыбранныеЗначения(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда 
		
		Модифицированность = Истина;
		
		Для Каждого ВыбраннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Товары.ДанныеСтроки(ВыбраннаяСтрока);
			ДанныеСтроки.Модифицированность = Истина;
			
			Если РезультатЗакрытия.Свойство("ДатаПоставки") Тогда 
				
				ДанныеСтроки.ПредварительныйСрокПоставки = РезультатЗакрытия.ДатаПоставки; 
				
			КонецЕсли;
			
			Если РезультатЗакрытия.Свойство("НоменклатурнаяГруппа") Тогда 
				
				Если ЗначениеЗаполнено(РезультатЗакрытия.НоменклатурнаяГруппа) Тогда 
					
					ДанныеСтроки.НоменклатурнаяГруппа = РезультатЗакрытия.НоменклатурнаяГруппа;	 
					
				Иначе
					
					ДанныеСтроки.НоменклатурнаяГруппа = ДанныеСтроки.НоменклатурнаяГруппаПоУмолчанию;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
									
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыНоменклатурнаяГруппаПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеСтроки.НоменклатурнаяГруппа) Тогда 
		
		ТекущиеДанныеСтроки.НоменклатурнаяГруппа = ТекущиеДанныеСтроки.НоменклатурнаяГруппаПоУмолчанию;
		
	КонецЕсли; 
	
	ТекущиеДанныеСтроки.Модифицированность = Истина;
			
КонецПроцедуры 

&НаКлиенте
Процедура ТолькоСвояНоменклатураПриИзменении(Элемент)
	
	УстановитьОтборПоОтветственному();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийКПозицииПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанныеСтроки.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредварительныйСрокПоставкиПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанныеСтроки.Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы  

&НаКлиенте
Процедура ПервоначальныйПорядок(Команда)
	
Товары.Сортировать("ПорядковыйНомер");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТабличнуюЧастьПоТекущейКолонкеПоВозрастанию(Команда)
	
	ИмяСортируемойКолонки = ИмяТекущейКолонкиТабличнойЧастиТовары();
	
	Если ИмяСортируемойКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Сортировать(ИмяТекущейКолонкиТабличнойЧастиТовары());
	
КонецПроцедуры      

&НаКлиенте
Процедура СортироватьТабличнуюЧастьПоТекущейКолонкеПоУбыванию(Команда) 
	
	ИмяСортируемойКолонки = ИмяТекущейКолонкиТабличнойЧастиТовары();
	
	Если ИмяСортируемойКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Сортировать(ИмяТекущейКолонкиТабличнойЧастиТовары() + " Убыв"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияПодробно(Команда)
	
		
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОтбора = Новый Структура("ВнутреннийЗаказ,Номенклатура,ДополнительныеХарактеристикиНоменклатуры,ЕдиницаИзмерения");
	
	ЗначениеОтбора.ВнутреннийЗаказ = ВнутреннийЗаказ;	
	ЗначениеОтбора.Номенклатура = ТекущиеДанные.Номенклатура;
	ЗначениеОтбора.ДополнительныеХарактеристикиНоменклатуры = ТекущиеДанные.ДополнительныеХарактеристикиНоменклатуры;
	ЗначениеОтбора.ЕдиницаИзмерения  = ТекущиеДанные.ЕдиницаИзмерения;  
	
	ПараметрОтбор = Новый Структура("Отбор",ЗначениеОтбора);
	ОткрытьФорму("РегистрНакопления.ОстатокПотребностиПоВнутреннимЗаказам.Форма.ФормаСпискаПозицияПодробно",ПараметрОтбор,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыбранныеЗначения", ЭтаФорма);	
		
	ОткрытьФорму("Обработка.ОбработкаВнутреннихЗаказов.Форма.ФормаВыбораЗначений",,Элементы.Товары,,,,ОповещениеОВыборе,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры 

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ЗаписатьРезультатОбработки();
		Модифицированность = Ложь;
		Оповестить("ВыполненаОбработкаВнутреннегоЗаказа");
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Нет измененных записей");
		
	КонецЕсли;
			
КонецПроцедуры   

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	ЗаписатьРезультатОбработки();
	Модифицированность = Ложь; 
	Оповестить("ВыполненаОбработкаВнутреннегоЗаказа");
	ЭтаФорма.Закрыть();

КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции 

&НаСервере
Процедура УстановитьЗаголовокИДоступностьФормы()
	
	Автозаголовок = Ложь; 
	
	НомерИДатаВнутреннегоЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнутреннийЗаказ,"Номер, Дата");
	Заголовок = СтрШаблон("Обработка внутреннего заказа %1 от %2",НомерИДатаВнутреннегоЗаказа.Номер,Формат(НомерИДатаВнутреннегоЗаказа.Дата,"ДФ=dd.MM.yyyy")); 
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнутреннийЗаказ,"ПометкаУдаления") Тогда
		
		Заголовок = Заголовок + " (Только просмотр. Заказ помечен для удаления.)";	
		ТолькоПросмотр  = Истина; 
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыДаннымиИзВнутреннегоЗаказа(ВнутреннийЗаказ)
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнутреннийЗаказ,"Проведен") Тогда
		
		ТекстСообщения = "Внутренний заказ должен быть проведен.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Ответственный = КадрыСервер.ТекущийСотрудник();
	//СогласиеОВыполненииРабот = ДокументыСервер.НайтиСогласиеПодрядчикаНаВыполнениеРаботСЗакупкойМатериалов(ВнутреннийЗаказ);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомментарийКЗаголовкуВнутреннегоЗаказа.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.КомментарийКЗаголовкуВнутреннегоЗаказа КАК КомментарийКЗаголовкуВнутреннегоЗаказа
		|ГДЕ
		|	КомментарийКЗаголовкуВнутреннегоЗаказа.ВнутреннийЗаказ = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутреннийЗаказТовары.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура,
		|	ВнутреннийЗаказТовары.Количество КАК Количество,
		|	ВнутреннийЗаказТовары.ЕдиницаИзмеренияЗаказа КАК ЕдиницаИзмерения,
		|	ВнутреннийЗаказТовары.Ссылка КАК Ссылка,
		|	ВнутреннийЗаказТовары.ДополнительныеХарактеристикиНоменклатуры КАК ДополнительныеХарактеристикиНоменклатуры,
		|	NULL КАК Оветственный
		|ПОМЕСТИТЬ ВТНоменклатураЗаказаИРасширения
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|ГДЕ
		|	ВнутреннийЗаказТовары.Ссылка = &Ссылка
		|	И ВнутреннийЗаказТовары.Количество > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасширениеВнутреннегоЗаказаТовары.ПорядковыйНомер,
		|	РасширениеВнутреннегоЗаказаТовары.Номенклатура,
		|	РасширениеВнутреннегоЗаказаТовары.Количество,
		|	РасширениеВнутреннегоЗаказаТовары.ЕдиницаИзмеренияЗаказа,
		|	РасширениеВнутреннегоЗаказаТовары.Ссылка.Основание,
		|	РасширениеВнутреннегоЗаказаТовары.ДополнительныеХарактеристикиНоменклатуры,
		|	РасширениеВнутреннегоЗаказаТовары.Ссылка.Автор
		|ИЗ
		|	Документ.РасширениеВнутреннегоЗаказа.Товары КАК РасширениеВнутреннегоЗаказаТовары
		|ГДЕ
		|	РасширениеВнутреннегоЗаказаТовары.Ссылка.Основание = &Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВнутреннийЗаказТовары.ПорядковыйНомер) КАК ПорядковыйНомер,
		|	ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВнутреннийЗаказТовары.Количество) КАК Количество,
		|	ВнутреннийЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВнутреннийЗаказТовары.Ссылка КАК Ссылка,
		|	ВнутреннийЗаказТовары.ДополнительныеХарактеристикиНоменклатуры КАК ДополнительныеХарактеристикиНоменклатуры,
		|	МАКСИМУМ(ВнутреннийЗаказТовары.Оветственный) КАК Ответственный
		|ПОМЕСТИТЬ ВТНоменклатураЗаказа
		|ИЗ
		|	ВТНоменклатураЗаказаИРасширения КАК ВнутреннийЗаказТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗаказТовары.ЕдиницаИзмерения,
		|	ВнутреннийЗаказТовары.Номенклатура,
		|	ВнутреннийЗаказТовары.Ссылка,
		|	ВнутреннийЗаказТовары.ДополнительныеХарактеристикиНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураЗаказа.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ВТНоменклатураЗаказа.Номенклатура КАК Номенклатура,
		|	ВТНоменклатураЗаказа.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПоУмолчанию,
		|	ВТНоменклатураЗаказа.Количество КАК Количество,
		|	ВТНоменклатураЗаказа.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(РаспределениеПоИсполнителямОМТС.СотрудникОМТС, ВТНоменклатураЗаказа.Ответственный) КАК СотрудникОМТС,
		|	ПредварительнаяДатаПоставкиМатериалов.ДатаПоставки КАК ДатаПоставки,
		|	ЕСТЬNULL(НоменклатурнаяГруппаКПозицииЗаказа.НоменклатурнаяГруппа, ВТНоменклатураЗаказа.Номенклатура.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
		|	КомментарийКПозицииВнутреннегоЗаказа.Комментарий КАК КомментарийКПозиции,
		|	ВТНоменклатураЗаказа.ДополнительныеХарактеристикиНоменклатуры КАК ДополнительныеХарактеристикиНоменклатуры,
		|	ЕСТЬNULL(ОстатокПотребностиПоВнутреннимЗаказамОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстатокТовараПоСчетуОстатки.КоличествоЗакрытоеПотребностиОстаток, 0) КАК КЗакупке
		|ИЗ
		|	ВТНоменклатураЗаказа КАК ВТНоменклатураЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоИсполнителямОМТС КАК РаспределениеПоИсполнителямОМТС
		|		ПО ВТНоменклатураЗаказа.Ссылка = РаспределениеПоИсполнителямОМТС.ВнутреннийЗаказ
		|			И ВТНоменклатураЗаказа.Номенклатура = РаспределениеПоИсполнителямОМТС.Номенклатура
		|			И ВТНоменклатураЗаказа.ЕдиницаИзмерения = РаспределениеПоИсполнителямОМТС.ЕдиницаИзмерения
		|			И ВТНоменклатураЗаказа.ДополнительныеХарактеристикиНоменклатуры = РаспределениеПоИсполнителямОМТС.ДополнительныеХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредварительнаяДатаПоставкиМатериалов КАК ПредварительнаяДатаПоставкиМатериалов
		|		ПО ВТНоменклатураЗаказа.Ссылка = ПредварительнаяДатаПоставкиМатериалов.ВнутреннийЗаказ
		|			И ВТНоменклатураЗаказа.Номенклатура = ПредварительнаяДатаПоставкиМатериалов.Номенклатура
		|			И ВТНоменклатураЗаказа.ЕдиницаИзмерения = ПредварительнаяДатаПоставкиМатериалов.ЕдиницаИзмерения
		|			И ВТНоменклатураЗаказа.ДополнительныеХарактеристикиНоменклатуры = ПредварительнаяДатаПоставкиМатериалов.ДополнительныеХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатурнаяГруппаКПозицииЗаказа КАК НоменклатурнаяГруппаКПозицииЗаказа
		|		ПО ВТНоменклатураЗаказа.Ссылка = НоменклатурнаяГруппаКПозицииЗаказа.ВнутреннийЗаказ
		|			И ВТНоменклатураЗаказа.Номенклатура = НоменклатурнаяГруппаКПозицииЗаказа.Номенклатура
		|			И ВТНоменклатураЗаказа.ЕдиницаИзмерения = НоменклатурнаяГруппаКПозицииЗаказа.ЕдиницаИзмерения
		|			И ВТНоменклатураЗаказа.ДополнительныеХарактеристикиНоменклатуры = НоменклатурнаяГруппаКПозицииЗаказа.ДополнительныеХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомментарийКПозицииВнутреннегоЗаказа КАК КомментарийКПозицииВнутреннегоЗаказа
		|		ПО ВТНоменклатураЗаказа.Ссылка = КомментарийКПозицииВнутреннегоЗаказа.ВнутреннийЗаказ
		|			И ВТНоменклатураЗаказа.Номенклатура = КомментарийКПозицииВнутреннегоЗаказа.Номенклатура
		|			И ВТНоменклатураЗаказа.ЕдиницаИзмерения = КомментарийКПозицииВнутреннегоЗаказа.ЕдиницаИзмерения
		|			И ВТНоменклатураЗаказа.ДополнительныеХарактеристикиНоменклатуры = КомментарийКПозицииВнутреннегоЗаказа.ДополнительныеХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстатокПотребностиПоВнутреннимЗаказам.Остатки(&Период, ВнутреннийЗаказ = &ВнутреннийЗаказ) КАК ОстатокПотребностиПоВнутреннимЗаказамОстатки
		|		ПО ВТНоменклатураЗаказа.Ссылка = ОстатокПотребностиПоВнутреннимЗаказамОстатки.ВнутреннийЗаказ
		|			И ВТНоменклатураЗаказа.Номенклатура = ОстатокПотребностиПоВнутреннимЗаказамОстатки.Номенклатура
		|			И ВТНоменклатураЗаказа.ДополнительныеХарактеристикиНоменклатуры = ОстатокПотребностиПоВнутреннимЗаказамОстатки.ДополнительныеХарактеристикиНоменклатуры
		|			И ВТНоменклатураЗаказа.ЕдиницаИзмерения = ОстатокПотребностиПоВнутреннимЗаказамОстатки.ЕдиницаИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстатокТовараПоСчету.Остатки КАК ОстатокТовараПоСчетуОстатки
		|		ПО ВТНоменклатураЗаказа.Ссылка = ОстатокТовараПоСчетуОстатки.ВнутреннийЗаказ
		|			И ВТНоменклатураЗаказа.Номенклатура = ОстатокТовараПоСчетуОстатки.Номенклатура
		|			И ВТНоменклатураЗаказа.ДополнительныеХарактеристикиНоменклатуры = ОстатокТовараПоСчетуОстатки.ДополнительныеХарактеристикиНоменклатуры
		|			И ВТНоменклатураЗаказа.ЕдиницаИзмерения = ОстатокТовараПоСчетуОстатки.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Ссылка", ВнутреннийЗаказ); 
	Запрос.УстановитьПараметр("Основание", ВнутреннийЗаказ);
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	
	
	
	Запрос.УстановитьПараметр("Период", КонецДня(ТекущаяДатаСеанса()));	
	
	
	//Загрузить комментарий
	Результат = Запрос.ВыполнитьПакет(); 
	Выборка = Результат[0].Выбрать(); 
	Выборка.Следующий();
	Комментарий = Выборка.Комментарий;
	
	//Загрузить таблицу Товары
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекущаяСтрока = Товары.Добавить();	
		ТекущаяСтрока.ПорядковыйНомер  = Выборка.ПорядковыйНомер; 
		ТекущаяСтрока.Номенклатура = Выборка.Номенклатура;
		ТекущаяСтрока.ДополнительныеХарактеристикиНоменклатуры = Выборка.ДополнительныеХарактеристикиНоменклатуры;
		ТекущаяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		ТекущаяСтрока.Количество =		Выборка.Количество;
		ТекущаяСтрока.Ответственный =  Выборка.СотрудникОМТС;
		ТекущаяСтрока.ПредварительныйСрокПоставки = Выборка.ДатаПоставки; 
		ТекущаяСтрока.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		ТекущаяСтрока.КомментарийКПозиции = Выборка.КомментарийКПозиции;
		ТекущаяСтрока.КЗакупке = Выборка.КЗакупке;
		ТекущаяСтрока.НоменклатурнаяГруппаПоУмолчанию = Выборка.НоменклатурнаяГруппаПоУмолчанию;
		ТекущаяСтрока.Модифицированность = Ложь;
			
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ИмяТекущейКолонкиТабличнойЧастиТовары()
		
	Если ТекущийЭлемент.Имя <> "Товары" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТабличнойЧасти =  ТекущийЭлемент.Имя;
	ИмяТабличнойЧастиИКолонки = Элементы.Товары.ТекущийЭлемент.Имя;   
	ИмяКолонки = СтрЗаменить(ИмяТабличнойЧастиИКолонки, ИмяТабличнойЧасти,"");
	
	Возврат ИмяКолонки;

КонецФункции

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаписатьРезультатОбработки ();
	Оповестить("ВыполненаОбработкаВнутреннегоЗаказа");
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРезультатОбработки () 
	
	ТекстСообщения = "Результаты обработки успешно сохранены";
	
	НачатьТранзакцию();
	
	Попытка
		
		//Запись Комментария к заголовку внутреннего заказа
		Запись =  РегистрыСведений.КомментарийКЗаголовкуВнутреннегоЗаказа.СоздатьМенеджерЗаписи();
		
		Запись.ВнутреннийЗаказ = ВнутреннийЗаказ;
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			
			Запись.Комментарий = Комментарий;
			Запись.Записать(); 
			
		Иначе  
			Запись.Удалить(); 
		КонецЕсли;
		
		
		Для Каждого ТекущиеДанныеСтроки Из Товары Цикл
			
			Если  ТекущиеДанныеСтроки.Модифицированность = Истина Тогда 
				
				ЗаписатьВРегистСведенийПредварительнаяДатаПоставкиМатериаловНаСервере(ТекущиеДанныеСтроки);
				ЗаписатьВРегистСведенийНоменклатурнаяГруппаКПозицииЗаказаНаСервере(ТекущиеДанныеСтроки);
				ЗаписатьВРегистСведенийКомментарийКПозицииВнутреннегоЗаказаНаСервере(ТекущиеДанныеСтроки);
				ТекущиеДанныеСтроки.Модифицированность = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = "Ошибка. Данные обработки не сохранены." 
		
	КонецПопытки;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура 	УстановитьОтборПоОтветственному()
	
	Если ТолькоСвояНоменклатура Тогда
			 
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура ("Ответственный", КадрыСервер.ТекущийСотрудник());
		
	Иначе                                     
		
		Элементы.Товары.ОтборСтрок = Неопределено;	
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВРегистСведенийПредварительнаяДатаПоставкиМатериаловНаСервере(ТекущиеДанные)
		
	МенеджерЗаписи =  РегистрыСведений.ПредварительнаяДатаПоставкиМатериалов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ВнутреннийЗаказ = ВнутреннийЗаказ;
	МенеджерЗаписи.Номенклатура = ТекущиеДанные.Номенклатура;
	МенеджерЗаписи.ДополнительныеХарактеристикиНоменклатуры =  ТекущиеДанные.ДополнительныеХарактеристикиНоменклатуры;
	МенеджерЗаписи.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредварительныйСрокПоставки) Тогда
		МенеджерЗаписи.ДатаПоставки = ТекущиеДанные.ПредварительныйСрокПоставки;	
		МенеджерЗаписи.Записать(); 	
	Иначе  
		МенеджерЗаписи.Удалить(); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВРегистСведенийНоменклатурнаяГруппаКПозицииЗаказаНаСервере(ТекущиеДанные)

	МенеджерЗаписи =  РегистрыСведений.НоменклатурнаяГруппаКПозицииЗаказа.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ВнутреннийЗаказ = ВнутреннийЗаказ;
	МенеджерЗаписи.Номенклатура = ТекущиеДанные.Номенклатура;
	МенеджерЗаписи.ДополнительныеХарактеристикиНоменклатуры =  ТекущиеДанные.ДополнительныеХарактеристикиНоменклатуры;
	МенеджерЗаписи.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
		
	Если ТекущиеДанные.НоменклатурнаяГруппаПоУмолчанию = Справочники.НоменклатурныеГруппы.ПустаяСсылка()
		И ЗначениеЗаполнено(ТекущиеДанные.НоменклатурнаяГруппа)Тогда
		
		//В Элементе справочника номенклатура заполним поле номенклатурная группа.
		ЭлементСправочникаНоменклатура = ТекущиеДанные.Номенклатура.ПолучитьОбъект();
		ЭлементСправочникаНоменклатура.НоменклатурнаяГруппа = ТекущиеДанные.НоменклатурнаяГруппа;
		ЭлементСправочникаНоменклатура.Записать();  
		
		ТекущиеДанные.НоменклатурнаяГруппаПоУмолчанию = ТекущиеДанные.НоменклатурнаяГруппа;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатурнаяГруппа) 
		И ТекущиеДанные.НоменклатурнаяГруппа <> ТекущиеДанные.НоменклатурнаяГруппаПоУмолчанию Тогда
		МенеджерЗаписи.НоменклатурнаяГруппа = ТекущиеДанные.НоменклатурнаяГруппа;	
		МенеджерЗаписи.Записать(); 	
	Иначе  
		ТекущиеДанные.НоменклатурнаяГруппа = ТекущиеДанные.НоменклатурнаяГруппаПоУмолчанию;	
		МенеджерЗаписи.Удалить(); 
	КонецЕсли;
		
КонецПроцедуры    

&НаСервере
Процедура ЗаписатьВРегистСведенийКомментарийКПозицииВнутреннегоЗаказаНаСервере(ТекущиеДанные)

	МенеджерЗаписи =  РегистрыСведений.КомментарийКПозицииВнутреннегоЗаказа.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ВнутреннийЗаказ = ВнутреннийЗаказ;
	МенеджерЗаписи.Номенклатура = ТекущиеДанные.Номенклатура;
	МенеджерЗаписи.ДополнительныеХарактеристикиНоменклатуры =  ТекущиеДанные.ДополнительныеХарактеристикиНоменклатуры;
	МенеджерЗаписи.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.КомментарийКПозиции) Тогда
		МенеджерЗаписи.Комментарий = ТекущиеДанные.КомментарийКПозиции;	
		МенеджерЗаписи.Записать(); 	
	Иначе  
		МенеджерЗаписи.Удалить(); 
	КонецЕсли; 
			
КонецПроцедуры


#КонецОбласти




  
  











