
#Область ОбработчикиСобытийФормы    

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	УстановитьДоступностьФормы();
	ИнициализироватьКомпановщикНастроекСКД();
	ОбновитьТаблицуПотребности();   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьЗаголовкиТабличнойЧастиТовары();  
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.СуммаДокумента = Объект.Товары.Итог("СуммаСНДС");
	РасчитатьМаксимальнуюДатуПоставки();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы  

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	УстановитьЗаголовкиТабличнойЧастиТовары(); 
	ДокументыКлиент.ПересчитатьТабличнуюЧастьТовары(Объект.Товары,Объект.СтавкаНДС, Объект.ЦенаВключаетНДС)
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Для Каждого ТекущиеДанные Из Объект.Товары Цикл  
		
		ДокументыКлиент.ПересчитатьСуммуНДС( ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС); 
		ДокументыКлиент.ПересчитатьСуммуТовараСНДС(ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти    

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрытыеПотребности   

&НаКлиенте
Процедура ЗакрытыеПотребностиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЗакрытьПотребностьТекущихПозиций(ПараметрыПеретаскивания.Значение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПотребностьТекущихПозиций(МассивЭлементов)
	
		
	ТекущиеДанныеТаблицыТоварыПоСчету = Элементы.ТоварыПоСчету.ТекущиеДанные;
	
	Если ТекущиеДанныеТаблицыТоварыПоСчету = Неопределено Тогда 
		
		ТекстСообщения = "Нет данных из табличной части Товары по счету";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ТоварыПоСчету");
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ДанныеДляДобавления Из МассивЭлементов Цикл	
		
		ДобавитьДанныеВТЧЗакрытыеПотребности(ДанныеДляДобавления, ТекущиеДанныеТаблицыТоварыПоСчету);
		
	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура ЗакрытыеПотребностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные =  Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСтроки =  Элемент.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Поле.Имя = "ЗакрытыеПотребностиПредставлениеПересчетаЕдиницИзмерения" Тогда
		
		Если ТекущиеДанныеСтроки.ЕдиницаИзмеренияПотребности = ТекущиеДанныеСтроки.ЕдиницаИзмеренияПоставщика Тогда
		
		ТекстСообщения = "Единицы измерения номенклатуры в счете и заказе сопадают.
							|Коэффициент пересчета единиц измерений,в данном случае, пересчитывать не нужно: Он всегда равен 1."; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.ЗакрытыеПотребности["+ Элементы.ЗакрытыеПотребности.ТекущаяСтрока + "].ПредставлениеПересчетаЕдиницИзмерения"); 
		Возврат;	
		
	КонецЕсли;

		ПересчитатьЗакрытуюПотребностьСНовымКоэффициентом(ТекущиеДанные);
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеПотребностиКоличествоЗакрытоеПоСчетуПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ЗакрытыеПотребности.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету < 0 Тогда
		
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету = КоличествоЗакрытоеПоСчетуПередРедактированием;
		ТекстСообщения = "Ошибка. Отмена редактирования.
							|Количество не может принимать отрицательных значений."; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.ЗакрытыеПотребности[" + Элементы.ЗакрытыеПотребности.ТекущаяСтрока + "].КоличествоЗакрытоеПоСчету");
		Возврат;
		
	КонецЕсли; 
	
	Если ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету = КоличествоЗакрытоеПоСчетуПередРедактированием Тогда
		Возврат; //Данные не изменились. Пересчитывать не надо.
	КонецЕсли;
		
	ТекущиеДанныеТаблицыПотребность =   НайтиЭлементТаблицыПотребность(ТекущиеДанныеСтроки);   
	
	Если ТекущиеДанныеТаблицыПотребность = Неопределено Тогда 
		
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету = КоличествоЗакрытоеПоСчетуПередРедактированием;
		Возврат; //Непредвиденная ошибка. Вернуть все в исходное состояние.
		
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеСтроки.БазоваяЕдиницаИзмерения) Тогда 
		
		ТекстСообщения = "Откорректируйте паритет единиц измерений, а затем повторите ввод.";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету = 0;
		ПересчитатьЗакрытуюПотребностьСНовымКоэффициентом(ТекущиеДанныеСтроки); 
		Возврат;
		
	КонецЕсли;
	
	ДоступноеКоличествоКРаспределению = ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности + ТекущиеДанныеТаблицыПотребность.Количество;
	КРаспределению = ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету * ТекущиеДанныеСтроки.КоэффициентЕдиницыИзмерения; //КоличествоЗакрытоеПотребности = Базовая ед. изм.
	Если ТекущиеДанныеСтроки.ЕдиницаИзмеренияПоставщика = ТекущиеДанныеСтроки.БазоваяЕдиницаИзмерения Тогда
		КРаспределению = ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету / ТекущиеДанныеСтроки.КоэффициентЕдиницыИзмерения; 
	КонецЕсли;
	
	Если ДоступноеКоличествоКРаспределению < КРаспределению И Не ТекущиеДанныеСтроки.РазрешитьСверхобъем Тогда
		
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = ДоступноеКоличествоКРаспределению;
		ТекущиеДанныеТаблицыПотребность.Количество = 0;
		
	Иначе
		
		ТекущиеДанныеТаблицыПотребность.Количество = ТекущиеДанныеТаблицыПотребность.Количество - ( КРаспределению - ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности);
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = КРаспределению;
		
	КонецЕсли;
	ПересчитатьЗакрытуюПотребностьСУчетомТекущегоКоэффициента(ТекущиеДанныеСтроки);
	КоличествоЗакрытоеПоСчетуПередРедактированием = ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету;
	КоличествоЗакрытоеПотребностиПередРедактированием = ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеПотребностиРазрешитьСверхобъемПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ЗакрытыеПотребности.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;   
	
	Если Не ТекущиеДанныеСтроки.РазрешитьСверхобъем Тогда 
		
		ТекущиеДанныеТаблицыПотребность =   НайтиЭлементТаблицыПотребность(ТекущиеДанныеСтроки);   
		
		Если ТекущиеДанныеТаблицыПотребность = Неопределено Тогда 
			
			ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = КоличествоЗакрытоеПотребностиПередРедактированием;
			Возврат; //Непредвиденная ошибка. Вернуть все в исходное состояние.
			
		КонецЕсли;
		Если ТекущиеДанныеТаблицыПотребность.Количество < 0 Тогда
			ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности + ТекущиеДанныеТаблицыПотребность.Количество;
			ТекущиеДанныеТаблицыПотребность.Количество = 0;
			ПересчитатьЗакрытуюПотребностьСУчетомТекущегоКоэффициента(ТекущиеДанныеСтроки);
			КоличествоЗакрытоеПоСчетуПередРедактированием = ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету;
			КоличествоЗакрытоеПотребностиПередРедактированием = ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеПотребностиКоличествоЗакрытоеПотребностиПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ЗакрытыеПотребности.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности < 0 Тогда
		
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = КоличествоЗакрытоеПотребностиПередРедактированием;
		ТекстСообщения = "Ошибка. Отмена редактирования.
							|Количество не может принимать отрицательных значений."; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.ЗакрытыеПотребности[" + Элементы.ЗакрытыеПотребности.ТекущаяСтрока + "].КоличествоЗакрытоеПотребности");
		Возврат;
		
	КонецЕсли; 
	
	Если ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = КоличествоЗакрытоеПотребностиПередРедактированием Тогда
		Возврат; //Данные не изменились. Пересчитывать не надо.
	КонецЕсли;

	
	ТекущиеДанныеТаблицыПотребность =   НайтиЭлементТаблицыПотребность(ТекущиеДанныеСтроки);   
	
	Если ТекущиеДанныеТаблицыПотребность = Неопределено Тогда 
		
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = КоличествоЗакрытоеПотребностиПередРедактированием;
		Возврат; //Непредвиденная ошибка. Вернуть все в исходное состояние.
		
	КонецЕсли;
	
	
	ТекущиеДанныеТаблицыПотребность.Количество =  ТекущиеДанныеТаблицыПотребность.Количество - (ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности - КоличествоЗакрытоеПотребностиПередРедактированием); 
	
	Если ТекущиеДанныеТаблицыПотребность.Количество < 0 И Не ТекущиеДанныеСтроки.РазрешитьСверхобъем   Тогда
		
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности = ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности + ТекущиеДанныеТаблицыПотребность.Количество;
		ТекущиеДанныеТаблицыПотребность.Количество = 0;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеСтроки.БазоваяЕдиницаИзмерения) Тогда 
		
		ТекстСообщения = "Откорректируйте паритет единиц измерений, а затем повторите ввод.";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету = 0;
		ПересчитатьЗакрытуюПотребностьСНовымКоэффициентом(ТекущиеДанныеСтроки); 
		Возврат;
		
	КонецЕсли;
	
			
	ПересчитатьЗакрытуюПотребностьСУчетомТекущегоКоэффициента(ТекущиеДанныеСтроки);
	КоличествоЗакрытоеПоСчетуПередРедактированием = ТекущиеДанныеСтроки.КоличествоЗакрытоеПоСчету;
	КоличествоЗакрытоеПотребностиПередРедактированием = ТекущиеДанныеСтроки.КоличествоЗакрытоеПотребности;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеПотребностиПриАктивизацииСтроки(Элемент)
	
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда  
		КоличествоЗакрытоеПотребностиПередРедактированием = 0;
		Возврат;
	КонецЕсли;
	
	КоличествоЗакрытоеПотребностиПередРедактированием = ТекущиеДанные.КоличествоЗакрытоеПотребности;
	КоличествоЗакрытоеПоСчетуПередРедактированием = ТекущиеДанные.КоличествоЗакрытоеПоСчету;
	
	НайденныйЭлемент = 	 НайтиЭлементТаблицыПотребность(ТекущиеДанные);
	Если НайденныйЭлемент <> Неопределено Тогда 
			
		Элементы.Потребность.ТекущаяСтрока = НайденныйЭлемент.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары       

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДокументыКлиент.ПересчитатьСуммуНДС( ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС); 
	ДокументыКлиент.ПересчитатьСуммуТовараСНДС(ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС);

КонецПроцедуры
	
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДокументыКлиент.ПересчитатьСуммуНДС( ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС); 
	ДокументыКлиент.ПересчитатьСуммуТовараСНДС(ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные; 
	ДокументыКлиент.ПересчитатьЦенуТовараОтносительноСуммыНДС(ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС);
	
	//Изменилась цена. Заново прочитать Текущие данные. Пересчитать Сумму Товара с НДС.	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДокументыКлиент.ПересчитатьСуммуТовараСНДС(ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС);	
	
КонецПроцедуры      

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные; 
	ДокументыКлиент.ПересчитатьЦенуТовараОтносительноСуммыТовараСНДС(ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС);
	
	//Изменилась цена. Заново прочитать Текущие данные. Пересчитать Сумму НДС .	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДокументыКлиент.ПересчитатьСуммуНДС(ТекущиеДанные, Объект.СтавкаНДС, Объект.ЦенаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)    
	
	
	Если ТекущаяСтраница = Элементы.СтраницаЗакрытиеПотребностей Тогда 
		
		ЗагрузитьТоварыПоСчету ();
		ИнициализироватьТаблицуТоварыПоСчету();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанныеУдаляемойСтроки = Элемент.ТекущиеДанные;
	
	Отбор = Новый Структура("НоменклатураПоставщика, ЕдиницаИзмеренияПоставщика",
		ТекущиеДанныеУдаляемойСтроки.НоменклатураПоставщика, ТекущиеДанныеУдаляемойСтроки.ЕдиницаИзмерения);
	НайденныеСтроки = Объект.ЗакрытыеПотребности.НайтиСтроки(Отбор);
	Если  НайденныеСтроки.Количество() <> 0 Тогда
		
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не могу удалить текущую запись, так как к ней прикреплены позиции внутреннего заказа.");	
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти   

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыПоСчету

&НаКлиенте
Процедура ТоварыПоСчетуПриАктивизацииСтроки(Элемент)
	
	//Установить отбор таблицы ЗакрытыеПотребности     		
	ТекущиеДанныеСтроки = Элементы.ТоварыПоСчету.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда		
			Возврат;		
	КонецЕсли; 
	
	Элементы.ЗакрытыеПотребности.ОтборСтрок = Новый ФиксированнаяСтруктура("НоменклатураПоставщика, ЕдиницаИзмеренияПоставщика",ТекущиеДанныеСтроки.НоменклатураПоставщика, ТекущиеДанныеСтроки.ЕдиницаИзмерения );

	ОбновитьДанныеИЗаголовокОбОстаткеРаспределения();

КонецПроцедуры  

#КонецОбласти   

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпановщикНастроекОтбор       

&НаКлиенте
Процедура СписокНастройкиОтборПриИзменении(Элемент)
	
	ОбновитьТаблицуПотребности();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "СчетКонтрагента.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru='Загрузка списка товаров из файла'");   
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьСчетИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтр(Команда)
	
	ОбновитьТаблицуПотребности();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОстатокВСвободныйЗапас(Команда)  
	
	ТекущиеДанныеСтрокиТаблицыТовары = Элементы.ТоварыПоСчету.ТекущиеДанные;
	
	Если ТекущиеДанныеСтрокиТаблицыТовары = Неопределено Тогда
		
		ТекстСообщения = "Нет данных для распределения.";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ТоварыПоСчету");
		Возврат;
		
	КонецЕсли;	
	
	Если  КоличествоРаспределенноеКТекущейПозицииПоСчету(Элементы.ЗакрытыеПотребности.ОтборСтрок) = ТекущиеДанныеСтрокиТаблицыТовары.Количество Тогда
		ТекстСообщения = "Для текущей позиции по счету все количество уже распределено.";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат; 
		
	КонецЕсли;
		
	Остаток =  ТекущиеДанныеСтрокиТаблицыТовары.Количество - КоличествоРаспределенноеКТекущейПозицииПоСчету(Элементы.ЗакрытыеПотребности.ОтборСтрок);
	НоваяСтрока  = Объект.ЗакрытыеПотребности.Добавить();
	НоваяСтрока.Номенклатура = ТекущиеДанныеСтрокиТаблицыТовары.НоменклатураПоставщика;               			 
	НоваяСтрока.ВнутреннийЗаказ = ПредопределенноеЗначение("Документ.ВнутреннийЗаказ.ПустаяСсылка");                         
	НоваяСтрока.ЕдиницаИзмеренияПотребности = ТекущиеДанныеСтрокиТаблицыТовары.ЕдиницаИзмерения;             		
	НоваяСтрока.ДополнительныеХарактеристикиНоменклатуры = ПредопределенноеЗначение("Справочник.ДополнительныеХарактеристикиНоменклатуры.ПустаяСсылка");
	НоваяСтрока.КоличествоЗакрытоеПотребности = Остаток;
		
	НоваяСтрока.НоменклатураПоставщика = ТекущиеДанныеСтрокиТаблицыТовары.НоменклатураПоставщика; 
    НоваяСтрока.ЕдиницаИзмеренияПоставщика =  ТекущиеДанныеСтрокиТаблицыТовары.ЕдиницаИзмерения;  
	НоваяСтрока.КоличествоЗакрытоеПоСчету = Остаток;
	НоваяСтрока.РазрешитьСверхобъем = Истина;
	
	НоваяСтрока.БазоваяЕдиницаИзмерения = ТекущиеДанныеСтрокиТаблицыТовары.ЕдиницаИзмерения;
	НоваяСтрока.КоэффициентЕдиницыИзмерения = 1;
    УстановитьПредставлениеПересчетаЕдиницИзмерения(НоваяСтрока);
    ОбновитьТаблицуПотребности(); 
	ОбновитьДанныеИЗаголовокОбОстаткеРаспределения();
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрепитьПотребность(Команда)
	  	
	ОткрепитьПотребностьТекущихПозиций();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПотребность(Команда)
	
	МассивЭлементов = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.Потребность.ВыделенныеСтроки Цикл
		
		МассивЭлементов.Добавить(Элементы.Потребность.ДанныеСтроки(ВыбраннаяСтрока));
		
	КонецЦикла;  
	
	ЗакрытьПотребностьТекущихПозиций(МассивЭлементов);
	
КонецПроцедуры

 #КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
Процедура ИнициализироватьКомпановщикНастроекСКД()
		
	МакетСКД = Документы.СчетКонтрагента.ПолучитьМакет("МакетСКД");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД,УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);

КонецПроцедуры  

&НаКлиенте
Процедура УстановитьЗаголовкиТабличнойЧастиТовары() 
	
	Если Объект.ЦенаВключаетНДС Тогда
		Элементы.товары.ПодчиненныеЭлементы.ТоварыЦена.Заголовок = "Цена с НДС";
	Иначе
		Элементы.товары.ПодчиненныеЭлементы.ТоварыЦена.Заголовок = "Цена без НДС";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПотребности(); 
	
	МакетСКД = Документы.СчетКонтрагента.ПолучитьМакет("МакетСКД");

	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СчетКонтрагента", Объект.Ссылка);	
	
	ТЗЗакрытыеПотребности = Объект.ЗакрытыеПотребности.Выгрузить();

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ВнешнийНаборДанных = Новый Структура("ТЗЗакрытыеПотребности", ТЗЗакрытыеПотребности);   
			
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешнийНаборДанных);
	
	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);  
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат.Свернуть("ВнутреннийЗаказ, Номенклатура, ДополнительныеХарактеристикиНоменклатуры, ЕдиницаИзмерения","Количество");
	Потребность.Очистить();	
	Потребность.Загрузить(Результат);

КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьСчетИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнителныеПараметры)Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСчетИзФайлаНаСервере(АдресЗагруженныхДанных);
	ДокументыКлиент.ПересчитатьТабличнуюЧастьТовары(Объект.Товары, Объект.СтавкаНДС,Объект.ЦенаВключаетНДС);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСчетИзФайлаНаСервере(АдресЗагружунныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагружунныхДанных);
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		   ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаТаблицы);
			
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьТоварыПоСчету () 
	
	ТоварыВыгрузка  = Объект.Товары.Выгрузить();
	ТоварыВыгрузка.Свернуть("НоменклатураПоставщика,ЕдиницаИзмерения ", "Количество" );
	ТоварыПоСчету.Загрузить(ТоварыВыгрузка);

КонецПроцедуры

&НаКлиенте
Функция КоличествоРаспределенноеКТекущейПозицииПоСчету(ОтборФиксированнаяСтруктура);
	//ОтборФиксированнаяСтруктура - значение отбора строк в таблице Элементы.ЗакрытыеПотребности, содержащащей текущие данные из реквизита ТоварыПоСчету
	//Может принимать значение Неопределено. В этом случае в таблице Элементы.ЗакрытыеПотребности отбор не установлен.
	
	КоличествоКРаспределению = 0; 
	
	НайденныеЭлементы = Объект.ЗакрытыеПотребности.НайтиСтроки(Новый Структура(ОтборФиксированнаяСтруктура));
	
	Для Каждого ТекущаяСтрока Из НайденныеЭлементы Цикл
		
		КоличествоКРаспределению = КоличествоКРаспределению + ТекущаяСтрока.КоличествоЗакрытоеПоСчету;
		
	КонецЦикла;
	
	Возврат КоличествоКРаспределению;	
	
КонецФункции

&НаКлиенте
Функция НайтиЭлементСДаннымиДляЗаписи(ТекущиеДанныеТаблицыТоварыПоСчету, ТекущиеДанныеТаблицыПотребность)
// Поиск существующего элемента для будующей корректировки полей количества.	

	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ТекущиеДанныеТаблицыПотребность.Номенклатура);
	Отбор.Вставить("ВнутреннийЗаказ",ТекущиеДанныеТаблицыПотребность.ВнутреннийЗаказ);
    Отбор.Вставить("ДополнительныеХарактеристикиНоменклатуры",ТекущиеДанныеТаблицыПотребность.ДополнительныеХарактеристикиНоменклатуры);
    Отбор.Вставить("ЕдиницаИзмеренияПотребности",ТекущиеДанныеТаблицыПотребность.ЕдиницаИзмерения);
    Отбор.Вставить("ЕдиницаИзмеренияПоставщика",ТекущиеДанныеТаблицыТоварыПоСчету.ЕдиницаИзмерения);
    Отбор.Вставить("НоменклатураПоставщика",ТекущиеДанныеТаблицыТоварыПоСчету.НоменклатураПоставщика);
	
	НайденныеЭлементы = Объект.ЗакрытыеПотребности.НайтиСтроки(Отбор);
	
	Если  НайденныеЭлементы.Количество() = 0 Тогда
		Возврат Неопределено; 
	Иначе
		Возврат НайденныеЭлементы[0];
	КонецЕсли;
	
КонецФункции   

&НаКлиенте
Функция НайтиЭлементТаблицыТоварыПоСчету(ТекущиеДанныеТаблицыЗакрытыеПотребности)
	

	Отбор = Новый Структура;
	Отбор.Вставить("НоменклатураПоставщика", ТекущиеДанныеТаблицыЗакрытыеПотребности.НоменклатураПоставщика);
	Отбор.Вставить("ЕдиницаИзмерения",ТекущиеДанныеТаблицыЗакрытыеПотребности.ЕдиницаИзмеренияПоставщика);
	
	НайденныеЭлементы = ТоварыПоСчету.НайтиСтроки(Отбор);
	
	Если  НайденныеЭлементы.Количество() = 0 Тогда
		Возврат Неопределено; 
	Иначе
		Возврат НайденныеЭлементы[0];
	КонецЕсли;
	
КонецФункции    

&НаКлиенте
Функция НайтиЭлементТаблицыПотребность(ТекущиеДанныеТаблицыЗакрытыеПотребности)

	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ТекущиеДанныеТаблицыЗакрытыеПотребности.Номенклатура);
	Отбор.Вставить("ВнутреннийЗаказ",ТекущиеДанныеТаблицыЗакрытыеПотребности.ВнутреннийЗаказ);
    Отбор.Вставить("ДополнительныеХарактеристикиНоменклатуры",ТекущиеДанныеТаблицыЗакрытыеПотребности.ДополнительныеХарактеристикиНоменклатуры);
    Отбор.Вставить("ЕдиницаИзмерения",ТекущиеДанныеТаблицыЗакрытыеПотребности.ЕдиницаИзмеренияПотребности);
   	
	НайденныеЭлементы = Потребность.НайтиСтроки(Отбор);
	
	Если  НайденныеЭлементы.Количество() = 0 Тогда
			
		СнятьФильтр();
		
		КоличествоЗакрытойПотребности = ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности;
		ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности = КоличествоЗакрытоеПотребностиПередРедактированием;
		ОбновитьТаблицуПотребности(); 
		ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности = КоличествоЗакрытойПотребности;
		НайденныеЭлементы = Потребность.НайтиСтроки(Отбор);

		Если НайденныеЭлементы.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю("Непредвиденная ошибка. Обратитесь к Админстратору");
			Возврат Неопределено; 
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат НайденныеЭлементы[0];

КонецФункции   

&НаКлиенте
Процедура ДобавитьДанныеВТЧЗакрытыеПотребности(ТекущиеДанныеТаблицыПотребность, ТекущиеДанныеТаблицыТоварыПоСчету)
	
	Если (ТекущиеДанныеТаблицыПотребность.Количество < 0) ИЛИ (Не ТипЗнч(ТекущиеДанныеТаблицыПотребность) = Тип("ДанныеФормыЭлементКоллекции")) Тогда 
		ТекстСообщения = "Нет данных для переноса";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Потребность");
		Возврат;
	КонецЕсли; 	 
	
	Если Элементы.ЗакрытыеПотребности.ОтборСтрок = Неопределено ИЛИ КоличествоРаспределенноеКТекущейПозицииПоСчету(Элементы.ЗакрытыеПотребности.ОтборСтрок) >= ТекущиеДанныеТаблицыТоварыПоСчету.Количество Тогда

		ТекстСообщения = "Все количество для текущей позиции по счету уже распределено.";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ТоварыПоСчету[" + Элементы.ТоварыПоСчету.ТекущаяСтрока + "].Количество");
		Возврат;
		
	КонецЕсли;
	
			
	ЭлементТаблицыЗакрытыеПотребности = НайтиЭлементСДаннымиДляЗаписи(ТекущиеДанныеТаблицыТоварыПоСчету, ТекущиеДанныеТаблицыПотребность);
	
	
	Если  ЭлементТаблицыЗакрытыеПотребности = Неопределено Тогда
		
		ДобавитьНовыйЭлементВТаблицуЗакрытыеПотребности(ТекущиеДанныеТаблицыТоварыПоСчету, ТекущиеДанныеТаблицыПотребность);
		
	Иначе
		
  		// Посчитать колчество с учетом границ 
		ЭлементТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности = ЭлементТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности
																		+ ТекущиеДанныеТаблицыПотребность.Количество;
        ТекущиеДанныеТаблицыПотребность.Количество = 0;
		
		УстановитьКакТекущуюСтрокуВТаблицеЗакрытыеПотребности(ЭлементТаблицыЗакрытыеПотребности);
		Если НЕ (ЗначениеЗаполнено(ЭлементТаблицыЗакрытыеПотребности.БазоваяЕдиницаИзмерения)
			И ЗначениеЗаполнено(ЭлементТаблицыЗакрытыеПотребности.КоэффициентЕдиницыИзмерения)) Тогда 
			ПересчитатьЗакрытуюПотребностьСНовымКоэффициентом(ЭлементТаблицыЗакрытыеПотребности);
		Иначе 
			
			ЭлементТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету = 0;
			ПересчитатьЗакрытуюПотребностьСУчетомТекущегоКоэффициента(ЭлементТаблицыЗакрытыеПотребности);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
  
&НаКлиенте
Процедура ДобавитьНовыйЭлементВТаблицуЗакрытыеПотребности(ТекущиеДанныеТаблицыТоварыПоСчету, ТекущиеДанныеТаблицыПотребность)
	
	Если ТекущиеДанныеТаблицыПотребность.Количество <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока  = Объект.ЗакрытыеПотребности.Добавить();
	НоваяСтрока.Номенклатура =  ТекущиеДанныеТаблицыПотребность.Номенклатура;               			 
	НоваяСтрока.ВнутреннийЗаказ = ТекущиеДанныеТаблицыПотребность.ВнутреннийЗаказ;                         
	НоваяСтрока.ЕдиницаИзмеренияПотребности = ТекущиеДанныеТаблицыПотребность.ЕдиницаИзмерения;             		
	НоваяСтрока.ДополнительныеХарактеристикиНоменклатуры = ТекущиеДанныеТаблицыПотребность.ДополнительныеХарактеристикиНоменклатуры;
	НоваяСтрока.КоличествоЗакрытоеПотребности = ТекущиеДанныеТаблицыПотребность.Количество;
	
	НоваяСтрока.НоменклатураПоставщика = ТекущиеДанныеТаблицыТоварыПоСчету.НоменклатураПоставщика; 
	НоваяСтрока.ЕдиницаИзмеренияПоставщика =  ТекущиеДанныеТаблицыТоварыПоСчету.ЕдиницаИзмерения; 
	
	НоваяСтрока.БазоваяЕдиницаИзмерения = Неопределено;
	НоваяСтрока.КоэффициентЕдиницыИзмерения = 0;
	НоваяСтрока.ПредставлениеПересчетаЕдиницИзмерения = "Неопределно";
	
	ТекущиеДанныеТаблицыПотребность.Количество = 0;
	
	УстановитьКакТекущуюСтрокуВТаблицеЗакрытыеПотребности(НоваяСтрока);
	
	Если НоваяСтрока.ЕдиницаИзмеренияПотребности = НоваяСтрока.ЕдиницаИзмеренияПоставщика Тогда 
		
		НоваяСтрока.БазоваяЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмеренияПотребности;
		НоваяСтрока.КоэффициентЕдиницыИзмерения = 1;
		УстановитьПредставлениеПересчетаЕдиницИзмерения(НоваяСтрока);
		ПересчитатьЗакрытуюПотребностьСУчетомТекущегоКоэффициента(НоваяСтрока);
		
	Иначе 
		
		УстановитьКакТекущуюСтрокуВТаблицеЗакрытыеПотребности(НоваяСтрока); 
		//ОпределитьбазовцюЕдининцуИПересчитатьЗакрытуюПотребность
		ПересчитатьЗакрытуюПотребностьСНовымКоэффициентом(НоваяСтрока);
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКакТекущуюСтрокуВТаблицеЗакрытыеПотребности(Элемент)
	
	Перем ОтборСтрок;
	
	ОтборСтрок = Элементы.ЗакрытыеПотребности.ОтборСтрок;  
	Элементы.ЗакрытыеПотребности.ОтборСтрок = Неопределено;
	Элементы.ЗакрытыеПотребности.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
	Элементы.ЗакрытыеПотребности.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры    

&НаКлиенте
Процедура УстановитьПредставлениеПересчетаЕдиницИзмерения(ТекущиеДанныеТаблициЗакрытыеПотребности)
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблициЗакрытыеПотребности.БазоваяЕдиницаИзмерения)  ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблициЗакрытыеПотребности.КоэффициентЕдиницыИзмерения) Тогда 
		ТекущиеДанныеТаблициЗакрытыеПотребности.ПредставлениеПересчетаЕдиницИзмерения = "Неопределено";		
		Возврат;
	КонецЕсли;
	
	Если  ТекущиеДанныеТаблициЗакрытыеПотребности.БазоваяЕдиницаИзмерения = ТекущиеДанныеТаблициЗакрытыеПотребности.ЕдиницаИзмеренияПотребности Тогда
		
		ТекущиеДанныеТаблициЗакрытыеПотребности.ПредставлениеПересчетаЕдиницИзмерения 
							= СтрШаблон("1 %1 = %2 %3", 
							ТекущиеДанныеТаблициЗакрытыеПотребности.ЕдиницаИзмеренияПоставщика,
							ТекущиеДанныеТаблициЗакрытыеПотребности.КоэффициентЕдиницыИзмерения,
							ТекущиеДанныеТаблициЗакрытыеПотребности.ЕдиницаИзмеренияПотребности );
			
	Иначе  
		
		ТекущиеДанныеТаблициЗакрытыеПотребности.ПредставлениеПересчетаЕдиницИзмерения 
							= СтрШаблон("1 %1 = %2 %3", 
							ТекущиеДанныеТаблициЗакрытыеПотребности.ЕдиницаИзмеренияПотребности,
							ТекущиеДанныеТаблициЗакрытыеПотребности.КоэффициентЕдиницыИзмерения,
							ТекущиеДанныеТаблициЗакрытыеПотребности.ЕдиницаИзмеренияПоставщика );
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗакрытуюПотребностьСНовымКоэффициентом(РедактируемыеДанныеТаблицыЗакрытыеПотребности)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьПолученныеЗначения",ЭтаФорма,РедактируемыеДанныеТаблицыЗакрытыеПотребности);	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияПоставщика",РедактируемыеДанныеТаблицыЗакрытыеПотребности.ЕдиницаИзмеренияПоставщика);
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияПотребности",РедактируемыеДанныеТаблицыЗакрытыеПотребности.ЕдиницаИзмеренияПотребности);
	ПараметрыФормы.Вставить("НоменклатураПоставщика",РедактируемыеДанныеТаблицыЗакрытыеПотребности.НоменклатураПоставщика);
	ПараметрыФормы.Вставить("НоменклатураПотребности",РедактируемыеДанныеТаблицыЗакрытыеПотребности.Номенклатура); 
	ПараметрыФормы.Вставить("БазоваяЕдиницаИзмерения",РедактируемыеДанныеТаблицыЗакрытыеПотребности.БазоваяЕдиницаИзмерения);
	ПараметрыФормы.Вставить("КоэффициентЕдиницыИзмерения",РедактируемыеДанныеТаблицыЗакрытыеПотребности.КоэффициентЕдиницыИзмерения);	
	ОткрытьФорму("ОбщаяФорма.ФормаУстановкиКоэффициентаПересчета",ПараметрыФормы,Элементы.ЗакрытыеПотребности,,,,ОповещениеОВыборе,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныеЗначения (РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеТаблицыЗакрытыеПотребности = ДополнительныеПараметры;
	ТекущиеДанныеТаблицыЗакрытыеПотребности.БазоваяЕдиницаИзмерения = РезультатЗакрытия.БазоваяЕдиницаИзмерения;
	ТекущиеДанныеТаблицыЗакрытыеПотребности.КоэффициентЕдиницыИзмерения = РезультатЗакрытия.КоэффициентЕдиницыИзмерения;
	УстановитьПредставлениеПересчетаЕдиницИзмерения(ТекущиеДанныеТаблицыЗакрытыеПотребности); 
 
	ПересчитатьЗакрытуюПотребностьСУчетомТекущегоКоэффициента(ТекущиеДанныеТаблицыЗакрытыеПотребности);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФильтр()

	Для Каждого СтрокаОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		СтрокаОтбора.Использование = Ложь;	
		
	КонецЦикла;                           
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗакрытуюПотребностьСУчетомТекущегоКоэффициента(ТекущиеДанныеТаблицыЗакрытыеПотребности)
		
	ТекущиеДанныеТаблицыТоварыПоСчету = НайтиЭлементТаблицыТоварыПоСчету(ТекущиеДанныеТаблицыЗакрытыеПотребности);
	Если ТекущиеДанныеТаблицыТоварыПоСчету = Неопределено Тогда 
		ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету = КоличествоЗакрытоеПоСчетуПередРедактированием;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка. Не найдены данные в таблице потребности",,"ТоварыПоСчету");
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанныеТаблицыПотребность =   НайтиЭлементТаблицыПотребность(ТекущиеДанныеТаблицыЗакрытыеПотребности);
	Если ТекущиеДанныеТаблицыПотребность = Неопределено Тогда 
	
			Возврат; 
				
	КонецЕсли; 
	
	
	ДопустимоеКоличествоПоСчетуКРаспределению = ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету 
												+ ТекущиеДанныеТаблицыТоварыПоСчету.Количество
												- КоличествоРаспределенноеКТекущейПозицииПоСчету(Элементы.ЗакрытыеПотребности.ОтборСтрок); 
	
	Если ТекущиеДанныеТаблицыЗакрытыеПотребности.БазоваяЕдиницаИзмерения = ТекущиеДанныеТаблицыЗакрытыеПотребности.ЕдиницаИзмеренияПотребности Тогда
		
		КРаспределениюПоСчету = ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности/ТекущиеДанныеТаблицыЗакрытыеПотребности.КоэффициентЕдиницыИзмерения;	
		
	Иначе
		
		КРаспределениюПоСчету = ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности * ТекущиеДанныеТаблицыЗакрытыеПотребности.КоэффициентЕдиницыИзмерения;
		
	КонецЕсли;
	
	Если ДопустимоеКоличествоПоСчетуКРаспределению < КРаспределениюПоСчету Тогда
		
		ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету = ДопустимоеКоличествоПоСчетуКРаспределению;
		
		Если ТекущиеДанныеТаблицыЗакрытыеПотребности.БазоваяЕдиницаИзмерения = ТекущиеДанныеТаблицыЗакрытыеПотребности.ЕдиницаИзмеренияПотребности Тогда
			
			КоличествоКЗаписи = ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету * ТекущиеДанныеТаблицыЗакрытыеПотребности.КоэффициентЕдиницыИзмерения;	
			
			Разница =  ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности - КоличествоКЗаписи; 			
			
			ТекущиеДанныеТаблицыПотребность.Количество = ТекущиеДанныеТаблицыПотребность.Количество + Разница; 
			
			ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности = КоличествоКЗаписи;
			
		Иначе
			
			КоличествоКЗаписи = ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету / ТекущиеДанныеТаблицыЗакрытыеПотребности.КоэффициентЕдиницыИзмерения;	
			
			Разница =  ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности - КоличествоКЗаписи; 			
			
			ТекущиеДанныеТаблицыПотребность.Количество = ТекущиеДанныеТаблицыПотребность.Количество + Разница; 
			
			ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности = КоличествоКЗаписи;
			
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету = КРаспределениюПоСчету;	
		
	КонецЕсли;   
	
	ОбновитьДанныеИЗаголовокОбОстаткеРаспределения();  
	КоличествоЗакрытоеПоСчетуПередРедактированием =  ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПоСчету;
	КоличествоЗакрытоеПотребностиПередРедактированием = ТекущиеДанныеТаблицыЗакрытыеПотребности.КоличествоЗакрытоеПотребности;
			
КонецПроцедуры
  
&НаКлиенте
Процедура ОбновитьДанныеИЗаголовокОбОстаткеРаспределения()

	ТекущиеДанныеСтрокиТаблицыТовары = Элементы.ТоварыПоСчету.ТекущиеДанные;
	
	Если ТекущиеДанныеСтрокиТаблицыТовары = Неопределено Тогда
		
		Элементы.ГруппаПотребностьПоВнутреннимЗаказам.Заголовок = "Потребности по внутренним заказам";
		Возврат;
		
	КонецЕсли;
	
	ОсталосьРаспределить = ТекущиеДанныеСтрокиТаблицыТовары.Количество - КоличествоРаспределенноеКТекущейПозицииПоСчету(Элементы.ЗакрытыеПотребности.ОтборСтрок);
		
	ТекстЗаголовка = СтрШаблон("%1  - осталось распределить: %2 %3",ТекущиеДанныеСтрокиТаблицыТовары.НоменклатураПоставщика, 
	
	ОсталосьРаспределить , ТекущиеДанныеСтрокиТаблицыТовары.ЕдиницаИзмерения);
	
	Элементы.ГруппаПотребностьПоВнутреннимЗаказам.Заголовок = ТекстЗаголовка;  
	
	ТекущиеДанныеСтрокиТаблицыТовары.ОсталосьРаспределить = ОсталосьРаспределить;

  КонецПроцедуры

&НаКлиенте
Процедура ОткрепитьПотребностьТекущихПозиций()
	
	МассивСтрок = Новый Массив;
	Для Каждого ВыбраннаяСтрока Из Элементы.ЗакрытыеПотребности.ВыделенныеСтроки Цикл
		
		МассивСтрок.Добавить(Элементы.ЗакрытыеПотребности.ДанныеСтроки(ВыбраннаяСтрока));	
		               
	КонецЦикла;
	
	Для Каждого  ТекущаяСтрока из  МассивСтрок Цикл	
			
		Объект.ЗакрытыеПотребности.Удалить(ТекущаяСтрока); 
		
	КонецЦикла;
	
	ОбновитьТаблицуПотребности();
	ОбновитьДанныеИЗаголовокОбОстаткеРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностьПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОткрепитьПотребностьТекущихПозиций();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьТаблицуТоварыПоСчету()
	
	Для Каждого ТекущиеДанныеСтроки Из ТоварыПоСчету Цикл
		
		КоличествоКРаспределению = 0; 
		
		Отбор = Новый Структура("НоменклатураПоставщика, ЕдиницаИзмеренияПоставщика", ТекущиеДанныеСтроки.НоменклатураПоставщика,ТекущиеДанныеСтроки.ЕдиницаИзмерения);  
		
		НайденныеЭлементы = Объект.ЗакрытыеПотребности.НайтиСтроки(Отбор);
		
		Для Каждого ТекущаяСтрокаЗакрытыеПотребности Из НайденныеЭлементы Цикл
			
			КоличествоКРаспределению = КоличествоКРаспределению + ТекущаяСтрокаЗакрытыеПотребности.КоличествоЗакрытоеПоСчету;
			
		КонецЦикла;
		
			
		ТекущиеДанныеСтроки.ОсталосьРаспределить = ТекущиеДанныеСтроки.Количество - КоличествоКРаспределению;	
		
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьМаксимальнуюДатуПоставки()
	
	Если  Не ЗначениеЗаполнено(Объект.ДатаЗаказаВПроизводство) Тогда
		
		Объект.ДатаПоставки = Перечисления.СтатусыПоставкиМатериала.НеЗаказано;
					
	Иначе
		
		МаксимальныйСрокПоставки =  МаксимальныйСрокПоставки();
		
		Если МаксимальныйСрокПоставки = Неопределено Тогда 
			
			Объект.ДатаПоставки = Объект.ДатаЗаказаВПроизводство + Объект.СрокИзготовления * 86400;
			
		Иначе
			
			МаксимальныйСрокПоставки = ?(МаксимальныйСрокПоставки > Объект.СрокИзготовления, МаксимальныйСрокПоставки, Объект.СрокИзготовления);  
			Объект.ДатаПоставки = Объект.ДатаЗаказаВПроизводство + МаксимальныйСрокПоставки * 86400;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция МаксимальныйСрокПоставки()
	
	Запрос = Новый Запрос; 
	Товары = Объект.Товары.Выгрузить();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетКонтрагентаТовары.СрокИзготовления КАК СрокИзготовления
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК СчетКонтрагентаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Товары.СрокИзготовления) КАК СрокИзготовления
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	Если Не Выборка.СрокИзготовления = NUll Тогда
		Возврат Выборка.СрокИзготовления;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции   

&НаСервере
Процедура УстановитьДоступностьФормы();
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		ТолькоПросмотр = Ложь;	
		Возврат; 
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		
	КонецЕсли;
	
	//Если есть приходные накладные по этому счету, тогда установить только просмотр
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.Проведен
		|	И ПриходнаяНакладная.Основание = &Основание"; 
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда	
		ТолькоПросмотр = Истина;
	Иначе 
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти 





 
 
 


 











