#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
	
	АвтоЗаголовок = Ложь;
	Заголовок = Объект.Наименование; 
	
	Флажок = Истина;
	
	Если Объект.Выполнена Тогда
		ЭтаФорма.ТолькоПросмотр = Истина; 
		Элементы.Флажок.ТолькоПросмотр = Истина;
		Заголовок = Заголовок + " (Только просмотр)";
		ИнструкцияВыполненияЗадачи = "Задача выполнена";
	Иначе
		ИнструкцияВыполненияЗадачи = "Для выполнения задачи необходимо:
		|1. Просмотреть список распределения.
		|2. Если в списке имеются позиции не по Вашей номенклатуре, то снимите ометку в колонке ""Принято в работу"".
		|3. Не взятые в работу позиции заново распределит Руководитель ОМТС";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьВнутреннийЗаказ(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", Объект.ВнутреннийЗаказ); 
	ОткрытьФорму("Документ.ВнутреннийЗаказ.Форма.ФормаДокумента",ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначение(Команда)
	
	ПринятоВРаботу  = Флажок;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.СписокНоменклатуры.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокНоменклатуры.ДанныеСтроки(ВыбраннаяСтрока);
		ДанныеСтроки.ПринятоВработу = ПринятоВРаботу;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьВРаботуОтмеченные(Команда)
	
	Если Модифицированность Тогда  
		Если Не ЭтаФорма.Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВзятьВРаботуОтмеченныеНаСервере();

	Оповестить("Запись_ЗадачиЗадачиИсполнителейОМТС");
	ЭтаФорма.Модифицированность = Ложь; 
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВыполнитьТекущуюЗадачуНаСервере()
	
	ТекущаяЗадача = РеквизитФормыВЗначение("Объект");
	ТекущаяЗадача.ВыполнитьЗадачу();
	
КонецФункции

&НаСервере
Функция УдалитьНеВзятыеВРаботуПозицииРегистрСведенийРаспределениеПоИсполнителямОМТС()
	
	СписокНоменклатуры = Объект.СписокНоменклатуры.Выгрузить(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СписокНоменклатуры.ДополнительныеХарактеристикиНоменклатуры КАК ДополнительныеХарактеристикиНоменклатуры,
	|	СписокНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения, 
	|	СписокНоменклатуры.Количество КАК Количество
	|ПОМЕСТИТЬ ВТСписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|ГДЕ
	|	НЕ СписокНоменклатуры.ПринятоВработу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСписокНоменклатуры.Номенклатура КАК Номенклатура, 
	|	ВТСписокНоменклатуры.ДополнительныеХарактеристикиНоменклатуры КАК ДополнительныеХарактеристикиНоменклатуры,
	|	ВТСписокНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТСписокНоменклатуры.Количество КАК Количество,
	|	&ВнутреннийЗаказ КАК ВнутреннийЗаказ
	|ИЗ
	|	ВТСписокНоменклатуры КАК ВТСписокНоменклатуры";  
	
	Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры);   
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", Объект.ВнутреннийЗаказ);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СписокОтказов = РезультатЗапроса.Выгрузить();  
	
		Блокировка = Новый БлокировкаДанных;
	
		ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.РаспределениеПоИсполнителямОМТС");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировкиДанных.ИсточникДанных = СписокОтказов;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ЕдиницаИзмерения", "ЕдиницаИзмерения"); 
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ДополнительныеХарактеристикиНоменклатуры", "ДополнительныеХарактеристикиНоменклатуры");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ВнутреннийЗаказ", "ВнутреннийЗаказ");
		Блокировка.Заблокировать();
		
		Для Каждого ЗаписьКУдалению Из СписокОтказов  Цикл
			
			Запись =  РегистрыСведений.РаспределениеПоИсполнителямОМТС.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись,ЗаписьКУдалению);
			Запись.Удалить();
			
		КонецЦикла; 
		
		Возврат СписокОтказов; 
		
	Иначе
		
		Возврат Неопределено; 
		
	КонецЕсли;
	
Конецфункции

&НаСервере
Процедура ВзятьВРаботуОтмеченныеНаСервере()
	
	НачатьТранзакцию();  
	
	Попытка
		
		СписокОтказов = УдалитьНеВзятыеВРаботуПозицииРегистрСведенийРаспределениеПоИсполнителямОМТС();
		Если СписокОтказов <> Неопределено Тогда 
			
			БизнесПроцессыИЗадачиСервер.СоздатьЗадачуРаспределениеЗаявкиПоИсполителям(Объект.ВнутреннийЗаказ,СписокОтказов);
			
		КонецЕсли;
		                                                    
		ВыполнитьТекущуюЗадачуНаСервере();

		ЗафиксироватьТранзакцию(); 
		
	Исключение 
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заметки'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
		
	КонецПопытки;
	
	
	
КонецПроцедуры



